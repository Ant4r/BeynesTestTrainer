@using System.Drawing
@using System.Threading
@using BeynesTestTrainer.Model
@inject IJSRuntime JS


<h3>BeynesTest</h3>
<div style="margin-top:@(TopMargin+"px")">
    <div class="row">
        <div hidden="@(!HideText)" class="dot mx-auto"></div>
        <p hidden="@(HideText)" class="mx-auto displayResult">@(ColorName)</p>
    </div>

    <div hidden="@ConfigHide" class="mx-auto col-sm-8 col-lg-5 col-md-5 col-xl-5" >
        <div class="btn-primary m-2 text-center mx-auto w-25" @onclick=@LaunchTest>Go</div>
        <div class="btn-info m-2 text-center mx-auto w-25" @onclick="ToggleFullScreen">Full Screen</div>
        <div class="btn-success m-2 text-center mx-auto w-25" @onclick=@AddColor>Add Color</div>
        
        <div class="row m-4">
            <label class="col-3 text-right">Dot size</label>
            <input type="range" class="form-control col-9" min="0" max="1000" step="10" @bind-value=@DotSize>
        </div>
        
        <div class="row m-4">
            <label class="col-3 text-right">Top margin</label>
            <input type="range" class="form-control col-9" min="0" max="900" step="10" @bind-value=@TopMargin>
        </div>

        
        <div class="row m-4">
            <label class="col-6 text-right">Display Time</label>
            <input type="number" class="col-6 form-control" @bind-value="@Test.ShowTime">
        </div>
        <div class="row m-4">
            <label class="col-6 text-right">Off Time</label>
            <input type="number" class="col-6 form-control" @bind-value="@Test.OffTime">
        </div>
    
        @foreach (var color in Test.ColorList)
        {
            <div class="card m-1">
                
                <div class="btn-warning m-1 text-center mx-auto w-25" @onclick="() => RemoveColor(color)">Remove Color</div>

                <div class="row m-2">
                    <label class="col-6 text-right">ColorName</label>
                    <input type="text" class="col-6 form-control" @bind-value=@color.Name>
                </div>
                <div class="row m-2">
                    <label class="col-6 text-right">R</label>
                    <input type="number" class="col-6 form-control" @bind-value=@color.R>
                </div>
                <div class="row m-2">
                    <label class="col-6 text-right">G</label>
                    <input type="number" class="col-6 form-control" @bind-value=@color.G>
                </div>
                <div class="row m-2">
                    <label class="col-6 text-right">B</label>
                    <input type="number" class="col-6 form-control" @bind-value=@color.B>
                </div>
            </div>
        }
    </div>

</div>

<style>
 .dot{
     height: @(DotSize+"px");
     width: @(DotSize+"px");
     background-color: rgb(@CurrentColor.R , @CurrentColor.G , @CurrentColor.B);
     border-radius: 50%;
     display: inline-block;
 }
 
 .displayResult{
    color: white;
    font-weight: bold;
    font-size: @(DotSize/10+"px");
    margin-top: @(DotSize/2+"px");
 }
 
 body{
    background-color: black;
 }
</style>

@code {

    protected bool ConfigHide
    {
        get => _configHide;
        set => _configHide = value;
    }

    protected string ColorName
    {
        get => _colorName;
        set => _colorName = value;
    }

    protected DefinedColor CurrentColor = new ("",255, 255, 255);

    protected BeynesTestModel Test
    {
        get => _test;
        set => _test = value;
    }

    protected bool HideText = true;

    private int _dotsize = 150;
    private bool _configHide;
    private string _colorName;
    private BeynesTestModel _test;
    private int _topMargin = 400;

    protected int DotSize
    {
        get => _dotsize;
        set
        {
            _dotsize = value;
            StateHasChanged();
        }
    }

    protected int TopMargin  
    {
        get => _topMargin;
        set
        {
            _topMargin = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        ConfigHide = false;
        var rand = new Random();
        Test = new BeynesTestModel();
        Test.OffTime = 3000;
        Test.ShowTime = 1000;
        for (int i = 0; i < 5; i++)
        {
            Test.ColorList.Add(new DefinedColor("",(byte) rand.Next(0,255),(byte) rand.Next(0,255),(byte) rand.Next(0,255)));
        }
        
        base.OnInitialized();
    }


    private async Task PlayRandomly()
    {
        var colorListCopy = Test.ColorList.ToList();

        var r = new Random();

        foreach (var color in Test.ColorList)
        {
            HideText = true;
            var index = r.Next(0, colorListCopy.Count);
            CurrentColor = colorListCopy[index];
            StateHasChanged();
            await Task.Delay(Test.ShowTime);
            HideText = false;
            ColorName = colorListCopy[index].Name;
            StateHasChanged();
            await Task.Delay(Test.OffTime);
            colorListCopy.RemoveAt(index);
        }
    }
    

    private async Task LaunchTest()
    {
        ConfigHide = true;
        CurrentColor = new DefinedColor("",0, 0, 0);
        HideText = true;
        StateHasChanged();
        await Task.Delay(1000);


        await PlayRandomly();

        HideText = true;
        CurrentColor = new DefinedColor("",255, 255, 255);
        ConfigHide = false;
        StateHasChanged();
        await Task.Delay(10);
        await ToggleFullScreen();
    }


    private EventCallback RemoveColor(DefinedColor color)
    {
        Test.ColorList.Remove(color);
        StateHasChanged();
        return EventCallback.Empty;
    }

    private void AddColor()
    {
        Test.ColorList.Add(new DefinedColor("",0,0,0));
    }

    private async Task ToggleFullScreen() => await JS.InvokeVoidAsync("beynesTest.toggleFullScreen");


}
